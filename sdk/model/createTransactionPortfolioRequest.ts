/**
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3462
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Property } from './property';
import { ResourceId } from './resourceId';

export class CreateTransactionPortfolioRequest {
    /**
    * The name of the transaction portfolio.
    */
    'displayName': string;
    /**
    * A description for the transaction portfolio.
    */
    'description'?: string | null;
    /**
    * The code of the transaction portfolio. Together with the scope this uniquely identifies the transaction portfolio.
    */
    'code': string;
    /**
    * The effective datetime at which to create the transaction portfolio. No transactions can be added to the transaction portfolio before this date. Defaults to the current LUSID system datetime if not specified.
    */
    'created'?: Date | null;
    /**
    * The base currency of the transaction portfolio in ISO 4217 currency code format.
    */
    'baseCurrency': string;
    'corporateActionSourceId'?: ResourceId;
    /**
    * Determines the accounting treatment given to the transaction portfolio\'s tax lots. The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst
    */
    'accountingMethod'?: CreateTransactionPortfolioRequest.AccountingMethodEnum;
    /**
    * A set of unique transaction properties to group the transaction portfolio\'s holdings by, perhaps for strategy tagging. Each property must be from the \'Transaction\' domain and identified by a key in the format {domain}/{scope}/{code}, for example \'Transaction/strategies/quantsignal\'. Note that sub-holding keys cannot currently be added after the transaction portfolio has been created; see https://support.lusid.com/knowledgebase/article/KA-01879/en-us for more information.
    */
    'subHoldingKeys'?: Array<string> | null;
    /**
    * A set of unique portfolio properties to add custom data to the transaction portfolio. Each property must be from the \'Portfolio\' domain and identified by a key in the format {domain}/{scope}/{code}, for example \'Portfolio/Manager/Id\'. Note these properties must be pre-defined.
    */
    'properties'?: { [key: string]: Property; } | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "Date"
        },
        {
            "name": "baseCurrency",
            "baseName": "baseCurrency",
            "type": "string"
        },
        {
            "name": "corporateActionSourceId",
            "baseName": "corporateActionSourceId",
            "type": "ResourceId"
        },
        {
            "name": "accountingMethod",
            "baseName": "accountingMethod",
            "type": "CreateTransactionPortfolioRequest.AccountingMethodEnum"
        },
        {
            "name": "subHoldingKeys",
            "baseName": "subHoldingKeys",
            "type": "Array<string>"
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "{ [key: string]: Property; }"
        }    ];

    static getAttributeTypeMap() {
        return CreateTransactionPortfolioRequest.attributeTypeMap;
    }
}

export namespace CreateTransactionPortfolioRequest {
    export enum AccountingMethodEnum {
        Default = <any> 'Default',
        AverageCost = <any> 'AverageCost',
        FirstInFirstOut = <any> 'FirstInFirstOut',
        LastInFirstOut = <any> 'LastInFirstOut',
        HighestCostFirst = <any> 'HighestCostFirst',
        LowestCostFirst = <any> 'LowestCostFirst'
    }
}
