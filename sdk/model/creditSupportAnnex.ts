/**
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3491
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ResourceId } from './resourceId';

/**
* Entity to capture the calculable and queryable methods and practices of determining and transferring collateral  to a counterparty as part of margining of transactions. These typically come from a particular ISDA agreement  that is in place between the two counterparties.
*/
export class CreditSupportAnnex {
    /**
    * The base, or reference, currency against which MtM value and exposure should be calculated  and in which the CSA parameters are defined if the currency is not otherwise explicitly stated.
    */
    'referenceCurrency': string;
    /**
    * The set of currencies within which it is acceptable to post cash collateral.
    */
    'collateralCurrencies': Array<string>;
    /**
    * The transactions will take place with reference to a particular ISDA master agreement. This  will likely be either the ISDA 1992 or ISDA 2002 agremeents or ISDA close-out 2009.
    */
    'isdaAgreementVersion': string;
    /**
    * The tenor, e.g. daily (1D) or biweekly (2W), at which frequency a margin call will be made, calculations  made and money transferred to readjust. The calculation might also require a specific time for valuation and notification.
    */
    'marginCallFrequency': string;
    /**
    * Are the calculations performed by the institutions\'s counterparty or the institution trading with them.
    */
    'valuationAgent': string;
    /**
    * At what level of exposure does collateral need to be posted. Will typically be zero for banks.  Should be stated in reference currency
    */
    'thresholdAmount': number;
    /**
    * Where a calculation needs to be rounded to a specific number of decimal places,  this states the number that that requires.
    */
    'roundingDecimalPlaces': number;
    /**
    * The initial margin that is required. In the reference currency
    */
    'initialMarginAmount': number;
    /**
    * The minimum amount, in the reference currency, that must be transferred when required.
    */
    'minimumTransferAmount': number;
    'id': ResourceId;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "referenceCurrency",
            "baseName": "referenceCurrency",
            "type": "string"
        },
        {
            "name": "collateralCurrencies",
            "baseName": "collateralCurrencies",
            "type": "Array<string>"
        },
        {
            "name": "isdaAgreementVersion",
            "baseName": "isdaAgreementVersion",
            "type": "string"
        },
        {
            "name": "marginCallFrequency",
            "baseName": "marginCallFrequency",
            "type": "string"
        },
        {
            "name": "valuationAgent",
            "baseName": "valuationAgent",
            "type": "string"
        },
        {
            "name": "thresholdAmount",
            "baseName": "thresholdAmount",
            "type": "number"
        },
        {
            "name": "roundingDecimalPlaces",
            "baseName": "roundingDecimalPlaces",
            "type": "number"
        },
        {
            "name": "initialMarginAmount",
            "baseName": "initialMarginAmount",
            "type": "number"
        },
        {
            "name": "minimumTransferAmount",
            "baseName": "minimumTransferAmount",
            "type": "number"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "ResourceId"
        }    ];

    static getAttributeTypeMap() {
        return CreditSupportAnnex.attributeTypeMap;
    }
}

