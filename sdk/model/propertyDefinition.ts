/**
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3494
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Link } from './link';
import { ResourceId } from './resourceId';

/**
* A list of property definitions.
*/
export class PropertyDefinition {
    /**
    * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
    */
    'href'?: string | null;
    /**
    * The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. \'Portfolio/Manager/Id\'.
    */
    'key'?: string | null;
    /**
    * The type of values that can be associated with this property. This is defined by the property\'s data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel
    */
    'valueType'?: PropertyDefinition.ValueTypeEnum;
    /**
    * The display name of the property.
    */
    'displayName'?: string | null;
    'dataTypeId'?: ResourceId;
    /**
    * The type of the property. The available values are: Label, Metric, Information
    */
    'type'?: PropertyDefinition.TypeEnum;
    /**
    * The units that can be associated with the property\'s values. This is defined by the property\'s data type. The available values are: NoUnits, Basic, Iso4217Currency
    */
    'unitSchema'?: PropertyDefinition.UnitSchemaEnum;
    /**
    * The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, CustomEntity
    */
    'domain'?: PropertyDefinition.DomainEnum;
    /**
    * The scope that the property exists in.
    */
    'scope'?: string | null;
    /**
    * The code of the property. Together with the domain and scope this uniquely identifies the property.
    */
    'code'?: string | null;
    /**
    * Whether or not a value is always required for this property.
    */
    'valueRequired'?: boolean;
    /**
    * Describes how the property\'s values can change over time. The available values are: Perpetual, TimeVariant
    */
    'lifeTime'?: PropertyDefinition.LifeTimeEnum;
    /**
    * Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.
    */
    'constraintStyle'?: string | null;
    /**
    * The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition
    */
    'propertyDefinitionType'?: PropertyDefinition.PropertyDefinitionTypeEnum;
    /**
    * A brief description of what a property of this property definition contains.
    */
    'propertyDescription'?: string | null;
    /**
    * The rule that defines how data is composed for a derived property.
    */
    'derivationFormula'?: string | null;
    /**
    * Collection of links.
    */
    'links'?: Array<Link> | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "href",
            "baseName": "href",
            "type": "string"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "valueType",
            "baseName": "valueType",
            "type": "PropertyDefinition.ValueTypeEnum"
        },
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string"
        },
        {
            "name": "dataTypeId",
            "baseName": "dataTypeId",
            "type": "ResourceId"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "PropertyDefinition.TypeEnum"
        },
        {
            "name": "unitSchema",
            "baseName": "unitSchema",
            "type": "PropertyDefinition.UnitSchemaEnum"
        },
        {
            "name": "domain",
            "baseName": "domain",
            "type": "PropertyDefinition.DomainEnum"
        },
        {
            "name": "scope",
            "baseName": "scope",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "valueRequired",
            "baseName": "valueRequired",
            "type": "boolean"
        },
        {
            "name": "lifeTime",
            "baseName": "lifeTime",
            "type": "PropertyDefinition.LifeTimeEnum"
        },
        {
            "name": "constraintStyle",
            "baseName": "constraintStyle",
            "type": "string"
        },
        {
            "name": "propertyDefinitionType",
            "baseName": "propertyDefinitionType",
            "type": "PropertyDefinition.PropertyDefinitionTypeEnum"
        },
        {
            "name": "propertyDescription",
            "baseName": "propertyDescription",
            "type": "string"
        },
        {
            "name": "derivationFormula",
            "baseName": "derivationFormula",
            "type": "string"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>"
        }    ];

    static getAttributeTypeMap() {
        return PropertyDefinition.attributeTypeMap;
    }
}

export namespace PropertyDefinition {
    export enum ValueTypeEnum {
        String = <any> 'String',
        Int = <any> 'Int',
        Decimal = <any> 'Decimal',
        DateTime = <any> 'DateTime',
        Boolean = <any> 'Boolean',
        Map = <any> 'Map',
        List = <any> 'List',
        PropertyArray = <any> 'PropertyArray',
        Percentage = <any> 'Percentage',
        Code = <any> 'Code',
        Id = <any> 'Id',
        Uri = <any> 'Uri',
        CurrencyAndAmount = <any> 'CurrencyAndAmount',
        TradePrice = <any> 'TradePrice',
        Currency = <any> 'Currency',
        MetricValue = <any> 'MetricValue',
        ResourceId = <any> 'ResourceId',
        ResultValue = <any> 'ResultValue',
        CutLocalTime = <any> 'CutLocalTime',
        DateOrCutLabel = <any> 'DateOrCutLabel'
    }
    export enum TypeEnum {
        Label = <any> 'Label',
        Metric = <any> 'Metric',
        Information = <any> 'Information'
    }
    export enum UnitSchemaEnum {
        NoUnits = <any> 'NoUnits',
        Basic = <any> 'Basic',
        Iso4217Currency = <any> 'Iso4217Currency'
    }
    export enum DomainEnum {
        NotDefined = <any> 'NotDefined',
        Transaction = <any> 'Transaction',
        Portfolio = <any> 'Portfolio',
        Holding = <any> 'Holding',
        ReferenceHolding = <any> 'ReferenceHolding',
        TransactionConfiguration = <any> 'TransactionConfiguration',
        Instrument = <any> 'Instrument',
        CutLabelDefinition = <any> 'CutLabelDefinition',
        Analytic = <any> 'Analytic',
        PortfolioGroup = <any> 'PortfolioGroup',
        Person = <any> 'Person',
        AccessMetadata = <any> 'AccessMetadata',
        Order = <any> 'Order',
        UnitResult = <any> 'UnitResult',
        MarketData = <any> 'MarketData',
        ConfigurationRecipe = <any> 'ConfigurationRecipe',
        Allocation = <any> 'Allocation',
        Calendar = <any> 'Calendar',
        LegalEntity = <any> 'LegalEntity',
        Placement = <any> 'Placement',
        Execution = <any> 'Execution',
        Block = <any> 'Block',
        Participation = <any> 'Participation',
        Package = <any> 'Package',
        OrderInstruction = <any> 'OrderInstruction',
        CustomEntity = <any> 'CustomEntity'
    }
    export enum LifeTimeEnum {
        Perpetual = <any> 'Perpetual',
        TimeVariant = <any> 'TimeVariant'
    }
    export enum PropertyDefinitionTypeEnum {
        ValueProperty = <any> 'ValueProperty',
        DerivedDefinition = <any> 'DerivedDefinition'
    }
}
