/**
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3518
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CurrencyAndAmount } from './currencyAndAmount';
import { Link } from './link';
import { PerpetualProperty } from './perpetualProperty';
import { Transaction } from './transaction';

/**
* The details for the cashflow for a given portfolio.
*/
export class PortfolioCashFlow {
    /**
    * The groupBy subHoldings and currency.
    */
    'groupById': number;
    /**
    * Sequence number determining the order of the cash flow records.
    */
    'sequenceNumber': number;
    /**
    * Indicates the date when the cash-flow settles.
    */
    'effectiveDate'?: Date;
    /**
    * The sub-holding properties which identify the holding. Each property will be from the \'Transaction\' domain. These are configured when a transaction portfolio is created.
    */
    'subHoldingKeys'?: { [key: string]: PerpetualProperty; } | null;
    /**
    * Indicates the record type (Closed, Open, Activity).
    */
    'type': string;
    /**
    * Indicates the specific movement of the transaction that generated this cash flow.
    */
    'movementName': string;
    'cashflow': CurrencyAndAmount;
    'balance': CurrencyAndAmount;
    /**
    * Exchange rate between the currency of this cash flow and the reporting currency.
    */
    'fxRate': number;
    'cashflowReportingCurrency': CurrencyAndAmount;
    'balanceReportingCurrency': CurrencyAndAmount;
    'translationGainLoss': CurrencyAndAmount;
    'costBasisReportingCurrency': CurrencyAndAmount;
    'transaction'?: Transaction;
    /**
    * Collection of links.
    */
    'links'?: Array<Link> | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "groupById",
            "baseName": "groupById",
            "type": "number"
        },
        {
            "name": "sequenceNumber",
            "baseName": "sequenceNumber",
            "type": "number"
        },
        {
            "name": "effectiveDate",
            "baseName": "effectiveDate",
            "type": "Date"
        },
        {
            "name": "subHoldingKeys",
            "baseName": "subHoldingKeys",
            "type": "{ [key: string]: PerpetualProperty; }"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "movementName",
            "baseName": "movementName",
            "type": "string"
        },
        {
            "name": "cashflow",
            "baseName": "cashflow",
            "type": "CurrencyAndAmount"
        },
        {
            "name": "balance",
            "baseName": "balance",
            "type": "CurrencyAndAmount"
        },
        {
            "name": "fxRate",
            "baseName": "fxRate",
            "type": "number"
        },
        {
            "name": "cashflowReportingCurrency",
            "baseName": "cashflowReportingCurrency",
            "type": "CurrencyAndAmount"
        },
        {
            "name": "balanceReportingCurrency",
            "baseName": "balanceReportingCurrency",
            "type": "CurrencyAndAmount"
        },
        {
            "name": "translationGainLoss",
            "baseName": "translationGainLoss",
            "type": "CurrencyAndAmount"
        },
        {
            "name": "costBasisReportingCurrency",
            "baseName": "costBasisReportingCurrency",
            "type": "CurrencyAndAmount"
        },
        {
            "name": "transaction",
            "baseName": "transaction",
            "type": "Transaction"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>"
        }    ];

    static getAttributeTypeMap() {
        return PortfolioCashFlow.attributeTypeMap;
    }
}

